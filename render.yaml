# render.yaml
# Versión corregida y simplificada basada en los errores reportados.

# Define los servicios que serán desplegados en Render.com
services:
  # --- Servicio APP (Aplicación Laravel PHP-FPM) ---
  # Render gestionará la construcción de la imagen desde tu Dockerfile.
  - type: web # Tipo de servicio "Web Service"
    name: inntek-app # Nombre único del servicio en Render
    runtime: docker # Indica que se construye a partir de un Dockerfile
    repo: https://github.com/inntekchile/controldoc.git # ¡ACTUALIZA ESTA URL con tu repositorio real!
    # dockerContext: . # Por defecto si el Dockerfile está en la raíz del repo
    # dockerfilePath: Dockerfile # Por defecto si el Dockerfile está en la raíz del repo
    # El 'working_dir' se maneja por el Dockerfile.
    # Los volúmenes de código fuente (e.g., ./app:/var/www) no se mapean así en Render;
    # Render clona tu repo en el contenedor.
    # El comando de inicio de PHP-FPM debería estar en tu Dockerfile.
    # Si necesitas un comando de inicio específico, por ejemplo:
    # startCommand: php-fpm
    pullRequestPreviews:
      autoDeploy: true
    envVars: # Variables de entorno para la aplicación Laravel
      - key: APP_ENV
        value: production
      - key: APP_DEBUG
        value: "false" # Asegurarse que sea string si Render lo espera así
      - key: DB_CONNECTION
        value: mysql
      - key: DB_HOST
        fromService:
          type: pserv
          name: inntek-db # Nombre del servicio de base de datos en Render
          property: host
      - key: DB_PORT
        fromService:
          type: pserv
          name: inntek-db
          property: port
      - key: DB_DATABASE
        fromService:
          type: pserv
          name: inntek-db
          property: databaseName
      - key: DB_USERNAME
        fromService:
          type: pserv
          name: inntek-db
          property: user
      - key: DB_PASSWORD
        fromService:
          type: pserv
          name: inntek-db
          property: password
      # Agrega cualquier otra variable de entorno de tu .env de Laravel aquí

  # --- Servicio Nginx (Servidor Web / Proxy Inverso) ---
  # Este servicio será el punto de entrada público.
  - type: web # Tipo de servicio "Web Service"
    name: inntek-nginx # Nombre único del servicio en Render
    runtime: docker # Usará Docker
    # El error 'cannot unmarshal !!str nginx:1... into file.Image' sugiere que 'image'
    # no puede ser una cadena directa o que no es el campo correcto para especificar la imagen.
    # En Render, si usas 'runtime: docker', puedes usar 'image' para una imagen preconstruida.
    # Si sigue dando error con 'image', una alternativa sería construir un Dockerfile
    # específico para Nginx en tu repo que use 'FROM nginx:1.21-alpine'
    # y copie la configuración. Pero 'image' debería funcionar.
    image: nginx:1.21-alpine # Usar imagen preconstruida de Nginx
    # Si quieres configurar Nginx, puedes tener el archivo default.conf en tu repo
    # y tu Dockerfile para Nginx lo copiaría. Ejemplo de cómo podría ser ese Dockerfile:
    # # Dockerfile.nginx (en tu repo)
    # FROM nginx:1.21-alpine
    # COPY ./nginx/default.conf /etc/nginx/conf.d/default.conf
    # Luego, en render.yaml usarías:
    # dockerfilePath: ./nginx/Dockerfile.nginx
    # dockerContext: . # Si el Dockerfile.nginx está en el subdirectorio nginx, el contexto es la raíz.
    # O simplemente si tu Dockerfile principal ya tiene Nginx:
    # build:
    #   dockerfilePath: Dockerfile # Ruta a tu Dockerfile que construye la imagen de Nginx
    #   dockerContext: .
    
    # Render maneja el mapeo de puertos externos automáticamente. No necesitas 'ports: "8000:80"'.
    # El puerto 80 del contenedor es el que Render expone.
    
    # Las dependencias son para el orden de despliegue, no para la comunicación de red.
    dependsOn:
      - inntek-app # Asegura que 'inntek-app' se despliegue antes que Nginx.

  # --- Servicio de Base de Datos (MySQL) ---
  # Render gestiona bases de datos directamente.
  - type: pserv # Servicio persistente (para bases de datos gestionadas)
    name: inntek-db # Nombre único para tu base de datos en Render
    databaseName: laravel_db # Nombre de la base de datos MySQL a crear
    # user: user # Opcional: define el usuario, si no, Render lo genera
    # password: password # Opcional: define la contraseña, si no, Render la genera
    plan: starter # Plan de base de datos (e.g., 'starter', 'standard', 'pro')

# --- Rutas (Routing) ---
# Aquí es donde configuras cómo Render enruta el tráfico HTTP/S entrante
# a tus servicios web. Este es el equivalente a la redirección de Nginx.
# El error 'field path not found in type file.Route' sugiere que 'path'
# debe ser un campo directamente bajo 'routes', no anidado de forma diferente.
routes:
  # Ruta para el servicio Nginx
  - type: http # Tipo de ruta (HTTP/HTTPS)
    path: /* # Todas las rutas entrantes
    serviceId: inntek-nginx # Dirige el tráfico al servicio 'inntek-nginx'
    # Aquí es donde 'inntek-nginx' recibirá todo el tráfico.
    # Luego, la configuración interna de Nginx (default.conf) reenviará a 'inntek-app'.


# Opcional: Servicio de cola (Queue Worker) si lo necesitas
# - type: worker # Tipo de servicio "Worker"
#   name: inntek-queue
#   runtime: docker
#   repo: https://github.com/tu_usuario/tu_repo_laravel.git # Mismo repositorio
#   # dockerfilePath: Dockerfile # O la ruta a un Dockerfile específico para el worker
#   command: php artisan queue:work --sleep=3 --tries=3 # Comando para iniciar el worker
#   envVars:
#     - key: REDIS_HOST
#       fromService:
#         type: keyvalue
#         name: inntek-redis # Si tienes un servicio Redis en Render
#         property: host
#     - key: REDIS_PORT
#       fromService:
#         type: keyvalue
#         name: inntek-redis
#         property: port
#   dependsOn:
#     - inntek-app
#     # - inntek-redis # Si usas Redis

# Opcional: Servicio de caché (Redis) si lo necesitas
# - type: keyvalue # Tipo de servicio "Key-Value Store" para Redis
#   name: inntek-redis
#   plan: starter # Plan para Redis
