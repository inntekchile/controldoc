      
# ==============================================================================
# Docker Compose Definitivo para Proyecto Laravel - Inspirado en render.yaml
# Versión: 2.0
#
# Este archivo orquesta 4 servicios principales para una aplicación Laravel robusta:
#   - nginx: Servidor web que actúa como proxy inverso.
#   - app: Contenedor PHP-FPM que ejecuta la lógica de la aplicación.
#   - db: Servidor de base de datos MySQL 8.
#   - queue: Worker dedicado para procesar trabajos en segundo plano.
#   - redis: Servidor de caché y colas en memoria.
#
# ==============================================================================

version: '3.8'

services:
  # --- Servicio NGINX (El Servidor Web) ---
  # Equivalente a un 'web service' en Render. Solo sirve archivos estáticos
  # y redirige las peticiones PHP al servicio 'app'.
  nginx:
    image: 'nginx:1.21-alpine'
    container_name: inntek-nginx
    restart: unless-stopped
    ports:
      - "8000:80"  # Expone el puerto 80 del contenedor al 8000 de la máquina local.
    volumes:
      - ./app:/var/www
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
      - db
    networks:
      - inntek-network

  # --- Servicio APP (El Corazón de Laravel - PHP-FPM) ---
  # Equivalente a un 'worker' o 'private service' en Render.
  # No está expuesto directamente a internet.
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inntek-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./app:/var/www
    networks:
      - inntek-network

  # --- Servicio de Base de Datos (MySQL) ---
  # Equivalente a un 'database' en Render.
  db:
    image: mysql:8.0
    container_name: inntek-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-laravel_db}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_USER: ${DB_USERNAME:-user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - inntek-db-data:/var/lib/mysql
    ports:
      # Expone el puerto para permitir conexiones externas si es necesario.
      - "33061:3306"
    networks:
      - inntek-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # --- Servicio de Cola (Queue Worker) ---
  # Equivalente a un 'worker' en Render.
  # Ejecuta los trabajos en segundo plano (emails, notificaciones, etc.).
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inntek-queue
    restart: unless-stopped
    # El 'startCommand' de Render se traduce aquí en el 'command'.
    command: php artisan queue:work --sleep=3 --tries=3
    working_dir: /var/www
    volumes:
      - ./app:/var/www
    depends_on:
      - app
      - redis
    networks:
      - inntek-network

  # --- Servicio de Caché/Colas (Redis) ---
  # Equivalente a un 'key-value store' como Redis en Render.
  redis:
    image: redis:6.2-alpine
    container_name: inntek-redis
    restart: unless-stopped
    ports:
      - "63791:6379"
    networks:
      - inntek-network
